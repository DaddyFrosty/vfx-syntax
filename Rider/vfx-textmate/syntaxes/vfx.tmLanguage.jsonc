{
	"information_for_contributors": [
		"This extension is a copy of the HLSL TextMate addon by vscode",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/tgjones/shaders-tmLanguage/commit/87c0dca3a39170dbd7ee7e277db4f915fb2de14a",
	"name": "VFX",
	"scopeName": "source.vfx",
	"patterns": [
		{
			"name": "meta.hlslblock",
			"begin": "\\b(HEADER|MODES|FEATURES|COMMON|VS|HS|DS|GS|PS)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.namespace.hlsl"
				}
			},
			"end": "$",
			"endCaptures": {
				"1": {
					"name": "keyword.hlsl"
				}
			}
			// "patterns": [
			// ]
		},
		{
			"include": "#state-unscoped"
		},
		{
			"name": "meta.hlslblock",
			"begin": "(\\{)",
			"beginCaptures": {
				"1": {
					"name": "default.hlsl" //"keyword.hlsl" // support.type.fx.hlsl is purple / Macro.
				}
			},
			"end": "(\\})",
			"endCaptures": {
				"1": {
					"name": "default.hlsl" // "keyword.hlsl"
				}
			},
			"patterns": [
				{
					"include": "#state-scoped"
				}
			]
		}
	],
	"repository": {
		"state-scoped": {
			"patterns": [
				{
					"include": "#always-available"
				},
				{
					"include": "#scoped-only"
				},
				{
					"include": "#last-include"
				}
			]
		},
		"state-unscoped": {
			"patterns": [
				{
					"include": "#always-available"
				},
				{
					"name": "invalid.hlsl",
					"match": "\\b[A-z_][.A-z0-9]*"
				},
				{
					"include": "#last-include"
				}
			]
		},
		"always-available": {
			"patterns": [
				{
					"name": "comment.line.block.hlsl",
					"begin": "/\\*",
					"end": "\\*/"
				},
				{
					"name": "comment.line.double-slash.hlsl",
					"begin": "//",
					"end": "$"
				},
				{ // Special macros.
					//"name": "support.type.fx.hlsl",
					"name": "support.constant.property-value.fx.filter.hlsl",
					"match": "\\b((?:PROGRAM|VFX_|D_|F_|S_|VS_|PS_|IS_|PC|VULKAN)[A-Z0-9_]*)\\b"
				},
				{ // (#)(define|if) MACRO
					"match": "^\\s*(#)\\s*(define|elif|ifdef|ifndef|if|undef|error)\\s+(\\b[A-z_][A-z0-9_]*)",
					"captures": {
						"1": {
							"name": "keyword.preprocessor.hlsl"
						},
						"2": {
							"name": "keyword.preprocessor.hlsl"
						},
						"3": {
							//"name": "meta.preprocessor.hlsl"
							"name": "support.type.fx.hlsl"
						}
					}
				},
				{
					"name": "keyword.preprocessor.hlsl",
					"match": "^\\s*#\\s*(define|elif|else|endif|ifdef|ifndef|if|undef|include|line|error|pragma)"
				},
				{
					"name": "keyword.typealias.hlsl",
					"match": "\\b(typedef)\\b"
				},
				{
					"name": "constant.numeric.decimal.hlsl",
					"match": "\\b[0-9]+\\.[0-9]*(F|f)?\\b"
				},
				{
					"name": "constant.numeric.decimal.hlsl",
					"match": "(\\.([0-9]+)(F|f)?)\\b"
				},
				{
					"name": "constant.numeric.decimal.hlsl",
					"match": "\\b([0-9]+(F|f)?)\\b"
				},
				{
					"name": "constant.numeric.hex.hlsl",
					"match": "\\b(0(x|X)[0-9a-fA-F]+)\\b"
				},
				{
					"name": "storage.type.basic.hlsl",
					"match": "\\b(bool([1-4](x[1-4])?)?|double([1-4](x[1-4])?)?|dword|float([1-4](x[1-4])?)?|half([1-4](x[1-4])?)?|int([1-4](x[1-4])?)?|matrix|min10float([1-4](x[1-4])?)?|min12int([1-4](x[1-4])?)?|min16float([1-4](x[1-4])?)?|min16int([1-4](x[1-4])?)?|min16uint([1-4](x[1-4])?)?|unsigned|uint([1-4](x[1-4])?)?|vector|void)\\b"
				},
				{
					//"name": "support.function.hlsl",
					//"match": "\\b(?i:MIN_MAG_MIP_POINT|MIN_MAG_POINT_MIP_LINEAR|MIN_POINT_MAG_LINEAR_MIP_POINT|MIN_POINT_MAG_MIP_LINEAR|MIN_LINEAR_MAG_MIP_POINT|MIN_LINEAR_MAG_POINT_MIP_LINEAR|MIN_MAG_LINEAR_MIP_POINT|MIN_MAG_MIP_LINEAR|ANISOTROPIC|COMPARISON_MIN_MAG_MIP_POINT|COMPARISON_MIN_MAG_POINT_MIP_LINEAR|COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT|COMPARISON_MIN_POINT_MAG_MIP_LINEAR|COMPARISON_MIN_LINEAR_MAG_MIP_POINT|COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR|BILINEAR|POINT|TRILINEAR|NEAREST|ANISO|USER_CONFIG|COMPARISON_MIN_MAG_LINEAR_MIP_POINT|COMPARISON_MIN_MAG_MIP_LINEAR|COMPARISON_ANISOTROPIC|TEXT_1BIT)\\b"
					// CLASS VARNAME
					"match": "(?:(Semantic)\\s*\\(\\s*(\\b[A-z_][A-z0-9_]*)\\s*(?:|\\,|\\)))",
					"captures": {
						"1": {
							"name": "support.function.hlsl"
						},
						"2": {
							"name": "support.constant.property-value.fx.filter.hlsl"
						}
					}
				},
				{
					//"name": "storage.type.basic.hlsl",
					//"match": "(?<=\\:\\s|\\:)(?i:BINORMAL[0-9]*|BLENDINDICES[0-9]*|BLENDWEIGHT[0-9]*|COLOR[0-9]*|NORMAL[0-9]*|POSITIONT|POSITION|PSIZE[0-9]*|TANGENT[0-9]*|TEXCOORD[0-9]*|FOG|TESSFACTOR[0-9]*|VFACE|VPOS|DEPTH[0-9]*)\\b"
					"match": "(?:\\s+([A-z_]+[A-z0-9_]*)\\s+\\:\\s+)(BINORMAL[0-9]*|BLENDINDICES[0-9]*|BLENDWEIGHT[0-9]*|COLOR[0-9]*|NORMAL[0-9]*|POSITIONT|POSITION|PSIZE[0-9]*|TANGENT[0-9]*|TEXCOORD[0-9]*|FOG|TESSFACTOR[0-9]*|VFACE|VPOS|DEPTH[0-9]*)\\b",
					"captures": {
						"1": {
							"name": "variable.hlsl"
						},
						"2": {
							"name": "storage.type.basic.hlsl"
						}
					}
				},
				{
					"name": "storage.type.basic.hlsl",
					"match": "(?<=\\:\\s|\\:)(?i:SV_ClipDistance[0-9]*|SV_CullDistance[0-9]*|SV_Coverage|SV_Depth|SV_DepthGreaterEqual[0-9]*|SV_DepthLessEqual[0-9]*|SV_InstanceID|SV_IsFrontFace|SV_ScreenPosition|SV_Position|SV_RenderTargetArrayIndex|SV_SampleIndex|SV_StencilRef|SV_Target[0-7]?|SV_VertexID|SV_ViewportArrayIndex)\\b"
				},
				{
					"name": "storage.type.basic.hlsl",
					"match": "(?<=\\:\\s|\\:)(?i:SV_DispatchThreadID|SV_DomainLocation|SV_GroupID|SV_GroupIndex|SV_GroupThreadID|SV_GSInstanceID|SV_InsideTessFactor|SV_OutputControlPointID|SV_TessFactor)\\b"
				},
				{
					"name": "storage.type.basic.hlsl",
					"match": "(?<=\\:\\s|\\:)(?i:SV_InnerCoverage|SV_StencilRef)\\b"
				},
				// {
				// 	"name": "storage.type.structured.hlsl",
				// 	"match": "\\b(cbuffer|class|interface|namespace|struct|tbuffer)\\b"
				// },


				{
					"name": "storage.type.structured.hlsl",
					"match": "(?:\\b(cbuffer|class|interface|namespace|struct|tbuffer)\\b)(\\s*\\b[A-z_]?[A-z0-9_]*)",
					"captures": {
						"1": {
							"name": "storage.type.structured.hlsl"
						},
						"2": {
							"name": "entity.name.type.hlsl"
						}
					}
				}

				
				// {
				// 	"name": "meta.struct.block",
				// 	"begin": "(?:\\b(cbuffer|class|interface|namespace|struct|tbuffer)\\b)(\\s*\\b[A-z_]?[A-z0-9_]*)",
				// 	"beginCaptures": {
				// 		"1": {
				// 			"name": "storage.type.structured.hlsl"
				// 		},
				// 		"2": {
				// 			"name": "entity.name.type.hlsl"
				// 		}
				// 	},
				// 	"end": "$",
				// 	"endCaptures": {
				// 		"1": {
				// 			"name": "support.type.fx.hlsl"
				// 		}
				// 	},
				// 	"patterns": [
				// 		{
				// 			"name": "meta.struct.block",
				// 			"begin": "(\\{)",
				// 			"beginCaptures": {
				// 				"1": {
				// 					"name": "support.type.fx.hlsl"
				// 				}
				// 			},
				// 			"end": "(\\})",
				// 			"patterns": [
				// 				{
				// 					"include": "#state-scoped"
				// 				}
				// 			]
				// 		},
				// 		{
				// 			"include": "#state-scoped"
				// 		}
				// 	]
				// }
			]
		},
		"scoped-only": {
			"patterns": [
				{
					"name": "constant.language.hlsl",
					"match": "\\b(false|true)\\b"
				},
				{
					"name": "support.type.fx.hlsl",
					"match": "(?:(\\b[A-z][A-z0-9_]*)(Attribute))\\b"
				},
				{
					"name": "support.type.texture.hlsl",
					"match": "\\b(Tex2DBicubic|Tex2DArrayS|Tex2DMS|AttributeTex2DS|Tex2D|Tex2DLevel|Tex2DLoad|Tex2DS|Tex2DLevelS)\\b"
				},
				{
					"name": "support.type.texture.hlsl",
					"match": "\\b(CreateTexture2D|CreateTexture2DWithoutSampler|CreateColorTexture2DWithMSAA|CreateTexture2DMSComponentsArg|CreateTexture2DInRegister)\\b"
				},
				{
					"name": "support.constant.property-value.fx.filter.hlsl", // support.type.fx.hlsl
					"match": "\\b(BlendState|DepthStencilState|RasterizerState|RenderState)\\b"
				},
				{
					"name": "keyword.control.hlsl",
					"match": "\\b(break|case|continue|default|discard|do|else|for|if|return|switch|while)\\b"
				},
				{
					"name": "keyword.control.fx.hlsl",
					"match": "\\b(compile)\\b"
				},
				{
					"name": "support.function.hlsl",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=[\\s]*\\()"
				},
				{
					//"name": "entity.name.type.hlsl",
					// CLASS::FUNC (CALLING)
					"match": "(?:\\b([a-zA-Z_][a-zA-Z0-9_]*)(?:[\\s]*(\\:\\:)(?=[\\s]*)))",
					"captures": {
						"1": {
							"name": "entity.name.type.hlsl"
						},
						"2": {
							"name": "default.hlsl"
						}
					}
				},
				{
					"name": "storage.modifier.hlsl",
					"match": "\\b(column_major|const|export|extern|globallycoherent|groupshared|inline|inout|in|out|precise|row_major|shared|static|uniform|volatile)\\b"
				},
				{
					"name": "storage.modifier.float.hlsl",
					"match": "\\b(snorm|unorm)\\b"
				},
				{
					"name": "storage.modifier.postfix.hlsl",
					"match": "\\b(packoffset|register)\\b"
				},
				{
					"name": "storage.modifier.interpolation.hlsl",
					"match": "\\b(centroid|linear|nointerpolation|noperspective|sample)\\b"
				},
				{
					"name": "storage.modifier.geometryshader.hlsl",
					"match": "\\b(lineadj|line|point|triangle|triangleadj)\\b"
				},
				{
					"name": "support.type.other.hlsl",
					"match": "\\b(string)\\b"
				},
				{
					"name": "support.type.object.hlsl",
					"match": "\\b(AppendStructuredBuffer|Buffer|ByteAddressBuffer|ConstantBuffer|ConsumeStructuredBuffer|InputPatch|OutputPatch)\\b"
				},
				{
					"name": "support.type.object.rasterizerordered.hlsl",
					"match": "\\b(RasterizerOrderedBuffer|RasterizerOrderedByteAddressBuffer|RasterizerOrderedStructuredBuffer|RasterizerOrderedTexture1D|RasterizerOrderedTexture1DArray|RasterizerOrderedTexture2D|RasterizerOrderedTexture2DArray|RasterizerOrderedTexture3D)\\b"
				},
				{
					"name": "support.type.object.rw.hlsl",
					"match": "\\b(RWBuffer|RWByteAddressBuffer|RWStructuredBuffer|RWTexture1D|RWTexture1DArray|RWTexture2D|RWTexture2DArray|RWTexture3D)\\b"
				},
				{
					"name": "support.type.object.geometryshader.hlsl",
					"match": "\\b(LineStream|PointStream|TriangleStream)\\b"
				},
				{
					"name": "support.type.sampler.legacy.hlsl",
					"match": "\\b(sampler|sampler1D|sampler2D|sampler3D|samplerCUBE|sampler_state)\\b"
				},
				{
					"name": "support.type.sampler.hlsl",
					"match": "\\b(SamplerState|SamplerComparisonState)\\b"
				},
				// {
				// 	"name": "support.type.texture.legacy.hlsl",
				// 	"match": "\\b(texture2D|textureCUBE)\\b"
				// },
				// {
				// 	"name": "support.type.texture.hlsl",
				// 	"match": "\\b(Texture1D|Texture1DArray|Texture2D|Texture2DArray|Texture2DMS|Texture2DMSArray|Texture3D|TextureCube|TextureCubeArray)\\b"
				// },
				{
					"name": "support.constant.property-value.fx.hlsl",
					"match": "\\b(FALSE|TRUE|NULL)\\b"
				},
				{
					"name": "storage.type.fx.technique.hlsl",
					"match": "\\b(technique|Technique|technique10|technique11|pass)\\b"
				},
				{
					"name": "support.constant.property-value.fx.filter.hlsl",
					"match": "\\b(AlphaToCoverageEnable|BlendEnable|SrcBlend|DestBlend|BlendOp|SrcBlendAlpha|DestBlendAlpha|BlendOpAlpha|RenderTargetWriteMask)\\b"
				},
				{
					"name": "support.constant.property-value.fx.filter.hlsl",
					"match": "\\b(DepthEnable|DepthWriteMask|DepthWriteEnable|DepthFunc|StencilEnable|StencilReadMask|StencilWriteMask|FrontFaceStencilFail|FrontFaceStencilZFail|FrontFaceStencilPass|FrontFaceStencilFunc|BackFaceStencilFail|BackFaceStencilZFail|BackFaceStencilPass|BackFaceStencilFunc)\\b"
				},
				{
					"name": "support.constant.property-value.fx.filter.hlsl",
					"match": "\\b(FillMode|CullMode|FrontCounterClockwise|DepthBias|DepthBiasClamp|SlopeScaleDepthBias|ZClipEnable|ScissorEnable|MultiSampleEnable|AntiAliasedLineEnable)\\b"
				},
				{
					"name": "support.constant.property-value.fx.filter.hlsl",
					"match": "\\b(Filter|AddressU|AddressV|AddressW|MipLODBias|MaxAnisotropy|ComparisonFunc|BorderColor|MinLOD|MaxLOD)\\b"
				},
				{
					"name": "support.constant.property-value.fx.blend.hlsl",
					"match": "\\b(?i:ZERO|ONE|SRC_COLOR|INV_SRC_COLOR|SRC_ALPHA|INV_SRC_ALPHA|DEST_ALPHA|INV_DEST_ALPHA|DEST_COLOR|INV_DEST_COLOR|SRC_ALPHA_SAT|BLEND_FACTOR|INV_BLEND_FACTOR|SRC1_COLOR|INV_SRC1_COLOR|SRC1_ALPHA|INV_SRC1_ALPHA)\\b"
				},
				{
					"name": "support.constant.property-value.fx.blendop.hlsl",
					"match": "\\b(?i:ADD|SUBTRACT|REV_SUBTRACT|MIN|MAX)\\b"
				},
				{
					"name": "support.constant.property-value.fx.depthwritemask.hlsl",
					"match": "\\b(?i:ALL)\\b"
				},
				{
					"name": "support.constant.property-value.fx.comparisonfunc.hlsl",
					"match": "\\b(?i:NEVER|LESS|EQUAL|LESS_EQUAL|GREATER|NOT_EQUAL|GREATER_EQUAL|ALWAYS)\\b"
				},
				{
					"name": "support.constant.property-value.fx.stencilop.hlsl",
					"match": "\\b(?i:KEEP|REPLACE|INCR_SAT|DECR_SAT|INVERT|INCR|DECR)\\b"
				},
				{
					"name": "support.constant.property-value.fx.fillmode.hlsl",
					"match": "\\b(?i:WIREFRAME|SOLID)\\b"
				},
				{
					"name": "support.constant.property-value.fx.cullmode.hlsl",
					"match": "\\b(?i:NONE|FRONT|BACK)\\b"
				},
				{
					"name": "support.constant.property-value.fx.filter.hlsl",
					"match": "\\b(?i:MIN_MAG_MIP_POINT|MIN_MAG_POINT_MIP_LINEAR|MIN_POINT_MAG_LINEAR_MIP_POINT|MIN_POINT_MAG_MIP_LINEAR|MIN_LINEAR_MAG_MIP_POINT|MIN_LINEAR_MAG_POINT_MIP_LINEAR|MIN_MAG_LINEAR_MIP_POINT|MIN_MAG_MIP_LINEAR|ANISOTROPIC|COMPARISON_MIN_MAG_MIP_POINT|COMPARISON_MIN_MAG_POINT_MIP_LINEAR|COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT|COMPARISON_MIN_POINT_MAG_MIP_LINEAR|COMPARISON_MIN_LINEAR_MAG_MIP_POINT|COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR|BILINEAR|POINT|TRILINEAR|NEAREST|ANISO|USER_CONFIG|COMPARISON_MIN_MAG_LINEAR_MIP_POINT|COMPARISON_MIN_MAG_MIP_LINEAR|COMPARISON_ANISOTROPIC|TEXT_1BIT)\\b"
				},
				{
					"name": "support.constant.property-value.fx.textureaddressmode.hlsl",
					"match": "\\b(?i:WRAP|MIRROR|CLAMP|BORDER|MIRROR_ONCE)\\b"
				},
				{
					// CLASS_AS_RETURN FUNCTION(?:)
					"match": "(?:(\\b[A-z_][A-z0-9_]*)\\s+(\\b[A-z_][A-z0-9_]*)\\s*(?:\\())",
					"captures": {
						"1": {
							"name": "entity.name.type.hlsl"
						},
						"2": {
							"name": "support.function.hlsl"
						}
					}
				},
				{
					// CLASS VARNAME
					"match": "(?:(\\b[A-z_][A-z0-9_]*)\\s+(\\b[A-z_][A-z0-9_]*)\\s*(?:\\(|\\;|\\=|\\,|\\)))",
					"captures": {
						"1": {
							"name": "entity.name.type.hlsl"
						},
						"2": {
							"name": "variable.parameter.hlsl"
						}
					}
				},
				{
					"name": "string.quoted.double.hlsl",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.hlsl",
							"match": "\\\\."
						}
					]
				},

				// So we don't ruing scoping.
				{
					"name": "meta.generic.block",
					"begin": "(\\{)",
					"beginCaptures": {
						"1": {
							"name": "default.hlsl" //"entity.name.type.hlsl"
						}
					},
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "default.hlsl"
						}
					},
					"patterns": [
						{
							"include": "#state-scoped"
						}
					]
				}
			]
		},
		"last-include": {
			"patterns": [
				{ // Macros.
					"name": "support.type.fx.hlsl",
					//"name": "meta.preprocessor.hlsl",
					"match": "\\b([A-Z_][A-Z0-9_]+)\\b"
				},
				{
					"name": "variable.hlsl",
					"match": "\\b[A-z_][.A-z0-9]*"
				}
			]
		}
	}
}